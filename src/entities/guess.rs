//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "guess")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub game_id: String,
    pub round_id: String,
    pub team_id: String,
    #[sea_orm(column_type = "Double")]
    pub lat: f64,
    #[sea_orm(column_type = "Double")]
    pub lng: f64,
    pub score: i32,
    pub time: Option<i32>,
    pub date: String,
    #[sea_orm(column_type = "Double")]
    pub distance: f64,
    pub country_code: Option<String>,
    pub subdivision_code: Option<String>,
    pub round_country_code: String,
    pub is_teams_best: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::duels_game::Entity",
        from = "Column::GameId",
        to = "super::duels_game::Column::Id"
    )]
    Game,
    #[sea_orm(
        belongs_to = "super::duels_round::Entity",
        from = "Column::RoundId",
        to = "super::duels_round::Column::Id"
    )]
    Round
}

impl Related<super::duels_game::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Game.def()
    }
}

impl Related<super::duels_round::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Round.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}