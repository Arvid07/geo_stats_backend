//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "location")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(column_type = "Double")]
    pub lat: f64,
    #[sea_orm(column_type = "Double")]
    pub lng: f64,
    #[sea_orm(column_type = "Double")]
    pub heading: f64,
    #[sea_orm(column_type = "Double")]
    pub pitch: f64,
    #[sea_orm(column_type = "Double")]
    pub zoom: f64,
    pub country_code: String,
    pub subdivision_code: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::duels_round::Entity",
        from = "Column::Id",
        to = "super::duels_round::Column::LocationId"
    )]
    Round
}

impl Related<super::duels_round::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Round.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}